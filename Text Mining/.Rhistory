tdm
dimnames(tdm)$Docs <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5])
tdm
tdm[1,3]
tdm[1,]
sum(tdm[1,])
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
tdm[i,5] <- sum(tdm[i,])
}
tdm
dimnames(tdm)$Docs <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5], "합계")
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
tdm[i,6] <- sum(tdm[i,])
}
tdm[,6]
tdm[,6] <- c()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
sum
tdm <- cbind(sum)
tdm
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm <- tdm[-index,]
tdm <- rbind(sum)
tdm
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm[,6] <- rbind(sum)
cbind(tdm, sum)
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm <- tdm[-index,]
cbind(tdm, sum)
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm <- tdm[-index,] %>%
cbind(., sum)
tdm
dimnames(tdm)$Docs <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5], "합계")
dimnames(tdm)
dimnames(tdm)[[2]][1]
dimnames(tdm)[[2]] <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5], "합계")
tdm
View(tdm)
read <- function(file){
noun <- c()
data <- readLines(file)
data <- data[nchar(data)!=0] %>%
paste(., collapse = "") %>%
gsub("[[:punct:]]", "",.) %>%
gsub("\n", "",.) %>%
SimplePos09()
data <- str_match(data, "([가-힣]+)/N")[,2] %>%
na.omit() %>%
paste(., collapse = " ")
return(data)
}
src_file <- list.files("/Users/kangseunggu/Desktop/R/Text Mining/data")
data <- c(read(src_file[1]), read(src_file[2]), read(src_file[3]), read(src_file[4]), read(src_file[5]))
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm <- tdm[-index,] %>%
cbind(., sum)
dimnames(tdm)[[2]] <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5], "합계")
View(tdm)
sum
View(tdm)
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
hp <- c()
hp <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
hp <- c(hp, sum(tdm[i,]))
}
index <- c()
hp <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)$Terms[i]) == 1){
index <- c(index, i)
}
hp <- c(hp, sum(tdm[i,]))
}
tdm[i,]
sum(tdm[i,])
sum(tdm[i,])
dimnames(tdm)
index <- c()
hp <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)[[1]][i]) == 1){
index <- c(index, i)
}
hp <- c(hp, sum(tdm[i,]))
}
hp
tdm %<>%  cbind(., sum)
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)[[1]][i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
read <- function(file){
noun <- c()
data <- readLines(file)
data <- data[nchar(data)!=0] %>%
paste(., collapse = "") %>%
gsub("[[:punct:]]", "",.) %>%
gsub("\n", "",.) %>%
SimplePos09()
data <- str_match(data, "([가-힣]+)/N")[,2] %>%
na.omit() %>%
paste(., collapse = " ")
return(data)
}
src_file <- list.files("/Users/kangseunggu/Desktop/R/Text Mining/data")
data <- c(read(src_file[1]), read(src_file[2]), read(src_file[3]), read(src_file[4]), read(src_file[5]))
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)[[1]][i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm %<>%  cbind(., hp)
tdm %<>%  cbind(., sum)
tdm
tdm <- tdm[-index,]
dimnames(tdm)[[2]] <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5], "합계")
View(tdm)
arrange(tdm, desc(sum))
as.data.frame(tdm)
dd <- as.data.frame(tdm) %>%
arrange(., desc("합계"))
dd
dd <- as.data.frame(tdm) %>%
arrange(., desc(합계))
dd
source('~/Desktop/R/Text Mining/data/Speech analysis.R', echo=TRUE)
dd <- as.data.frame(tdm) %>%
arrange(., desc(합계)) %>%
as.matrix()
dd
View(tdm)
tdm %<>%  as.data.frame(.) %>%
arrange(., desc(합계)) %>%
as.matrix()
View(tdm)
data %>%
VectorSource() %>%
Corpus()
data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix(., control = list(wordLengths = c(2, Inf))) %>%
as.matrix()
data %>%
VectorSource() %>%
Corpus()
data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix(., control = list(wordLengths = c(2, Inf)))
library(igraph)
ajdmatrix <- tdm %*% t(tdm)
ajdmatrix
graph.adjacency(adjmatrix, weighted=T, mode = "undirected")
ajdmatrix <- tdm %*% t(tdm)
graph.adjacency(adjmatrix, weighted=T, mode = "undirected")
g <- graph.adjacency(adjmatrix, weighted=T, mode = "undirected")
aj <- tdm %*% t(tdm)
g <- graph.adjacency(aj, weighted=T, mode = "undirected")
plot(g)
View(tdm)
result <- kmeans(tdm, 5)
result
plotcluster(tdm, result$cluster, color = T, shade = T)
d <- dist(t(tdm), method = "euclidian")
d
hc <- clust(d = d)
plot(hc)
hc <- hclust(d = d)
plot(hc)
d <- dist(t(tdm[,1:5]), method = "euclidian")
tdm[,1:5]
d <- dist(t(tdm[,1:5]), method = "euclidian")
hc <- hclust(d = d)
plot(hc)
plot(hc)
par(mfrow=c(1,1))
plot(hc)
plot(hc)
library(magrittr)
library(tm)
library(igraph)
library(dplyr)
library(KoNLP)
library(stringr)
library(igraph)
read <- function(file){
noun <- c()
data <- readLines(file)
data <- data[nchar(data)!=0] %>%
paste(., collapse = "") %>%
gsub("[[:punct:]]", "",.) %>%
gsub("\n", "",.) %>%
SimplePos09()
data <- str_match(data, "([가-힣]+)/N")[,2] %>%
na.omit() %>%
paste(., collapse = " ")
return(data)
}
src_file <- list.files("/Users/kangseunggu/Desktop/R/Text Mining/data")
data <- c(read(src_file[1]), read(src_file[2]), read(src_file[3]), read(src_file[4]), read(src_file[5]))
setwd("~/Desktop/R/Text Mining/data")
data <- c(read(src_file[1]), read(src_file[2]), read(src_file[3]), read(src_file[4]), read(src_file[5]))
tdm <- data %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix() %>%
as.matrix()
index <- c()
sum <- c()
for(i in 1:nrow(tdm)){
if(nchar(dimnames(tdm)[[1]][i]) == 1){
index <- c(index, i)
}
sum <- c(sum, sum(tdm[i,]))
}
tdm %<>%  cbind(., sum)
tdm <- tdm[-index,]
dimnames(tdm)[[2]] <- c(src_file[1], src_file[2], src_file[3], src_file[4], src_file[5], "합계")
tdm %<>%  as.data.frame(.) %>%
arrange(., desc(합계)) %>%
as.matrix()
View(tdm)
result <- kmeans(tdm, 5)
par(mfrow=c(1,1))
d <- dist(t(tdm[,1:5]), method = "euclidian")
hc <- hclust(d=d)
plot(hc)
library(graphics)
library(magrittr)
library(MASS)
library(psych)
library(cluster)
data("USArrests")
head(USArrests)
str(USArrests)
# 4가지 변수의 척도가 다르므로 scale 함수를 적용해 표준 점수로 변환 시킨다.
USArrests <- USArrests %>% scale
dim(USArrests)
# 주어진 행렬을 거리 행렬로 변환
dist.mat <- as.dist(1 - cor(t(USArrests)))
h1 <- hclust(dist.mat, method = "ward.D")
plot(h1)
#cutree : 군집의 인덱스를 구하는 함수
clusterCut1 <- cutree(h1, k=3)
rect.hclust(h1, k = 3)
h1 <- hclust(dist.mat, method = "ward.D")
h2 <- hclust(dist.mat, method = "complete")
h3 <- hclust(dist.mat, method = "average")
h4 <- hclust(dist.mat, method = "single")
plot(h1)
plot(h2)
plot(h3)
plot(h4)
plot(h1)
#cutree : 군집의 인덱스를 구하는 함수
clusterCut1 <- cutree(h1, k=3)
rect.hclust(h1, k = 3)
clusterCut1
rect.hclust(hc, k=3)
par(mfrow=c(1,1))
d <- dist(t(tdm[,1:5]), method = "euclidian")
hc <- hclust(d=d)
plot(hc)
rect.hclust(hc, k=3)
localeToCharset()
Sys.setlocale(category = "LC_CTYPE", locale = "ko KR.UTF-8")
localeToCharset()
par(mfrow=c(1,1))
d <- dist(t(tdm[,1:5]), method = "euclidian")
hc <- hclust(d=d)
plot(hc)
library(extrafont)
font_import()
par(family="NanumGothic")
plot(h1)
d <- dist(t(tdm[,1:5]), method = "euclidian")
hc <- hclust(d=d)
plot(hc)
plot(hc, sub = "클러스터링")
plot(hc, sub="", xlab="", ylab="")
plot(hc, sub="", xlab="", ylab="")
library(HistData)
library(ggplot2)
library(magrittr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggmap)
#Cholera$district %<>% as.factor(.)
#Cholera$region %<>% as.factor(.)
str(Cholera)
state <- levels(Cholera$region)
west <- Cholera %>%
filter(region==state[1])
sum_w <- sum(west$cholera_deaths)
sum_pw <- sum(west$poor_rate)
mean_hpw <- mean(west$house_val)
north <- Cholera %>%
filter(region==state[2])
sum_n <- sum(north$cholera_deaths)
sum_pn <- sum(north$poor_rate)
mean_hpn <- mean(north$house_val)
central <- Cholera %>%
filter(region==state[3])
sum_c <- sum(central$cholera_deaths)
sum_pc <- sum(central$poor_rate)
mean_hpc <- mean(central$house_val)
south <- Cholera %>%
filter(region==state[4])
sum_s <- sum(south$cholera_deaths)
sum_ps <- sum(south$poor_rate)
mean_hps <- mean(south$house_val)
kent <- Cholera %>%
filter(region==state[5])
sum_k <- sum(kent$cholera_deaths)
sum_pk <- sum(kent$poor_rate)
mean_hpk <- mean(kent$house_val)
Cholera <- data.frame(region=as.factor(state),
death=c(sum_w, sum_n, sum_c, sum_s, sum_k),
poor.rate = c(sum_pw, sum_pn, sum_pc, sum_ps, sum_pk),
mean.housePrice = c(mean_hpw, mean_hpn, mean_hpc, mean_hps, mean_hpk))
g1 <- ggplot(Cholera, aes(region,death,fill=region)) +
geom_bar(stat="identity")
g2 <- ggplot(Cholera, aes(region, poor.rate, fill=region)) +
geom_bar(stat = "identity") +
theme(legend.position = "none")
grid.arrange(g1, g2, nrow=1, ncol=2)
coordinate_hp <- function(i){
x <- Cholera$mean.housePrice[i]
y <- Cholera$poor.rate[i] + 0.05
if(i==1){
y <- Cholera$poor.rate[i] - 0.05
}
return(c(x,y))
}
coordinate_d <- function(i){
x <- Cholera$death[i]
y <- Cholera$poor.rate[i] + 0.05
if(i==5){
y <- Cholera$poor.rate[i] - 0.05
}
return(c(x,y))
}
par(mfrow=c(1,2))
color <- c("skyblue", "black", "red", "brown", "pink")
color <- color[as.numeric(Cholera$region)]
plot(Cholera$poor.rate~Cholera$mean.housePrice, pch=19, cex=2.3, col=color,
main = "지역에 따른 집의 평균 가격과 가난한 사람의 비율의 관계",
xlab="평균 집 가격", ylab="가난한 사람의 비율")
text(coordinate_hp(1)[1], coordinate_hp(1)[2], label="West", cex=0.8)
text(coordinate_hp(2)[1], coordinate_hp(2)[2], label="North", cex=0.8)
text(coordinate_hp(3)[1], coordinate_hp(3)[2], label="Central", cex=0.8)
text(coordinate_hp(4)[1], coordinate_hp(4)[2], label="South", cex=0.8)
text(coordinate_hp(5)[1], coordinate_hp(5)[2], label="Kent", cex=0.8)
plot(Cholera$poor.rate~Cholera$death, pch=19, cex=2.3, col=color,
main = "지역에 따른 콜레라 사망자 수와 가난한 사람의 비율의 관계",
xlab="사망자 수", ylab="가난한 사람의 비율")
text(coordinate_d(1)[1], coordinate_d(1)[2], label="West", cex=0.8)
text(coordinate_d(2)[1], coordinate_d(2)[2], label="North", cex=0.8)
text(coordinate_d(3)[1], coordinate_d(3)[2], label = "Central", cex=0.8)
text(coordinate_d(4)[1], coordinate_d(4)[2], label = "South", cex=0.8)
text(coordinate_d(5)[1], coordinate_d(5)[2], label = "Kent", cex=0.8)
ggplot(HistData::Cholera, aes(x=cholera_drate, y=poor_rate, color=region)) +
geom_point(size=4)#, pch=c(0, 2, 4, 8, 10)[HistData::Cholera$region])
proportion <- Cholera %>%
arrange(desc(region)) %>%
mutate(prop = death / sum(Cholera$death) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ggplot(proportion, aes(x="", y=prop, fill=region)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start = 0) +
theme_void()+
labs(fill="") +
geom_text(aes(y=ypos, label=paste0(round(prop, digit=2), "%", "\n", "(", death, "명)")))
g <- hclust(dist(t(tdm[,1:5]), method = "euclidian"))
plot(g, sub="", xlab="", ylab="")
par(mfrow=c(1,1))
g <- hclust(dist(t(tdm[,1:5]), method = "euclidian"))
plot(g, sub="", xlab="", ylab="")
rect.hclust(g, border="red",5)
rect.hclust(g, border="red",4)
rect.hclust(g, border="red",3)
g
par(mfrow=c(1,1))
g <- hclust(dist(t(tdm[,1:5]), method = "euclidian"))
plot(g, sub="", xlab="", ylab="")
rect.hclust(g, border="red", 3)
g <- hclust(dist(t(tdm[,1:5]), method = "euclidian")) %>%
as.dendrogram()
g
plot(g, sub="", xlab="", ylab="", type = "triangle")
g <- hclust(dist(t(tdm[,1:5]), method = "euclidian"))
install.packages("ggdendro")
library(ggdendro)
ggdendrogram(g, rotate=TRUE)
ggdendrogram(g)
ggdendrogram(g, family="NanumGothic")
theme_update(text=element_text(family="NanumGothic"))
ggdendrogram(g, family="NanumGothic")
theme_update(text=element_text(family="NanumGothic", hjust=0.5))
ggdendrogram(g, family="NanumGothic")
theme_update(text=element_text(family="NanumGothic", vjust=0.5))
ggdendrogram(g, family="NanumGothic")
